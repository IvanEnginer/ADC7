
GccApplication18.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ee  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000182  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000008e7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000030  00000000  00000000  00000916  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000174  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000111  00000000  00000000  00000aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001a9  00000000  00000000  00000bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000058  00000000  00000000  00000d74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000112  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000091  00000000  00000000  00000ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00000f6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  74:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z8ADC_Initv>:
#include <avr/interrupt.h>
#include <util/delay.h>

void ADC_Init(void)
{
	ADCSRA=((1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1));
  7c:	8e e8       	ldi	r24, 0x8E	; 142
  7e:	86 b9       	out	0x06, r24	; 6
	ADMUX=((1<<REFS1)|(1<<REFS0)|(1<<ADLAR));
  80:	80 ee       	ldi	r24, 0xE0	; 224
  82:	87 b9       	out	0x07, r24	; 7
  84:	08 95       	ret

00000086 <__vector_16>:
} 

ISR(ADC_vect)
{
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	8f 93       	push	r24
  92:	9f 93       	push	r25
	static unsigned char mode=0;
	
	if (mode==0)
  94:	80 91 60 00 	lds	r24, 0x0060
  98:	81 11       	cpse	r24, r1
  9a:	07 c0       	rjmp	.+14     	; 0xaa <__vector_16+0x24>
	{
		PORTB=ADCH;
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	88 bb       	out	0x18, r24	; 24
		mode=1;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	80 93 60 00 	sts	0x0060, r24
		ADMUX|=(1<<MUX0);
  a6:	38 9a       	sbi	0x07, 0	; 7
  a8:	10 c0       	rjmp	.+32     	; 0xca <__vector_16+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	87 ea       	ldi	r24, 0xA7	; 167
  ac:	91 e6       	ldi	r25, 0x61	; 97
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <__vector_16+0x28>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <__vector_16+0x2e>
  b4:	00 00       	nop
	
	else {
		
	_delay_ms(100);
	
	if(mode==1)
  b6:	80 91 60 00 	lds	r24, 0x0060
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	29 f4       	brne	.+10     	; 0xc8 <__vector_16+0x42>
	
	{
		PORTD=ADCH;
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	82 bb       	out	0x12, r24	; 18
		mode=0;
  c2:	10 92 60 00 	sts	0x0060, r1
		ADMUX&=~(1<<MUX0);
  c6:	38 98       	cbi	0x07, 0	; 7
	}
		ADCSRA |= (1<<ADSC);	
  c8:	36 9a       	sbi	0x06, 6	; 6
	}
}
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <main>:

int main(void)
{
	ADC_Init();
  d8:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z8ADC_Initv>
	ADCSRA |= (1<<ADSC);
  dc:	36 9a       	sbi	0x06, 6	; 6
	
	DDRD=0xFF;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	81 bb       	out	0x11, r24	; 17
	DDRB=0xFF;
  e2:	87 bb       	out	0x17, r24	; 23
	sei();
  e4:	78 94       	sei
    while(1)
    {
     asm("nop");   
  e6:	00 00       	nop
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <main+0xe>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
